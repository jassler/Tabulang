package de.hskempten.tabulang.items;

public enum LanguageItemType {
    VLIST_EMPTY, VLIST_ONE, VLIST_MULTI, VARDEF_ASSIGNMENT, VARDEF_PROCEDURALF, TUPEL_MULTI, TUPEL_ONE, TUPEL_EMPTY,

    TERM_BRACKET, TERM_IDENTIFIER, TERM_LOOP, TERM_FLIP, TERM_ORDINAL, TERM_DIRECTIONAL,
    TERM_FUNDEF, TERM_AGGREGATION, TERM_DISTINCT, TERM_FUNCALL,

    STATEMENT_LOOP, STATEMENT_IF, STATEMENT_VARDEF, STATEMENT_BODY,

    TERMR_PRED, TERMR_FILTER, TERMR_INTERSECT, TERMR_UNITE, TERMR_DOT, TERMR_OPERATOR, TERMR_MARK, TERMR_TUPEL,
    PROCEDURALF_FUNCBODY, PROCEDURALF_TERM, TERMR_NULL,

    PREDR_BOOL, PREDR_NULL,

    PRED_IN, PRED_BINRELSYM, PRED_TERM,
    PRED_NOT, PRED_QUANTIFIED, PRED_BOOLEAN, PRED_FUNCALL, PRED_BRACKET,

    QUANTIFIED_EXISTS, QUANTIFIED_FORALL,

    ORDINAL_NUMBER, ORDINAL_QUOTEDSTRING, ORDINAL_TUPEL, ORDINAL_NULL,

    OPERATOR_ADD, OPERATOR_SUBTRACT, OPERATOR_MULTIPLY, OPERATOR_DIVIDE, OPERATOR_DIV, OPERATOR_MOD, OPERATOR_POWER,

    MARK_WITHIF, MARK_WITHOUTIF,

    LOOP_STMT_MARK, LOOP_STMT_STATEMENT, LOOP_STMT_SET, LOOP_STMT_GROUP, LOOP_STATEMENT, LOOP_LOOPBODY,

    IF_WITHELSE, IF_WITHOUTELSE,

    GROUP_HIDING_AREA_FUNCALL, GROUP_HIDING_AREA, GROUP_HIDING_FUNCALL, GROUP_HIDING,
    GROUP_AREA_FUNCALL, GROUP_AREA, GROUP_FUNCALL, GROUP_EMPTY,

    FUNDEF_VLIST_FUNCBODY, FUNDEF_VLIST_TERM, FUNDEF_IDENTIFIER_FUNCBODY, FUNDEF_IDENTIFIER_TERM,

    FUNCBODY_RETURN, FUNCBODY_STATEMENTS, FUNCBODY_RETURNS,

    COUNT_DIRECTIONAL, COUNT_EMPTY,

    NULL,

    BINBOOL_AND, BINBOOL_IMPL, BINBOOL_IFF, BINBOOL_XOR, BINBOOL_OR, BINBOOL_NULL,

    ANYSTATEMENT_STATEMENT, ANYSTATEMENT_RETURN, ANYSTATEMENT_SET, ANYSTATEMENT_GROUP,

    AGGREGATION_COUNT, AGGREGATION_AVERAGE, TERMR_BRACKET, STATEMENT_IDENTIFIER, TERM_DIRECTIONAL_H, TERM_DIRECTIONAL_V, DISTINCT_ITEM, PREDR_BRACKET, STATEMENT_FUNCALL;

    public static int getPrecedence(LanguageItemType type) {
        return switch (type) {
            case TERMR_OPERATOR -> 0;
            case OPERATOR_ADD -> 1;
            case OPERATOR_SUBTRACT -> 2;
            case OPERATOR_MULTIPLY -> 3;
            case OPERATOR_MOD -> 4;
            case OPERATOR_DIV -> 5;
            case OPERATOR_DIVIDE -> 6;
            case OPERATOR_POWER -> 7;
            case TERM_IDENTIFIER, TERM_LOOP, TERM_FLIP,
                    TERM_ORDINAL, TERM_DIRECTIONAL, TERM_FUNDEF,
                    TERM_AGGREGATION, TERM_DISTINCT, TERM_FUNCALL -> 10;
            case TERM_BRACKET, TERMR_BRACKET, PRED_BRACKET -> -2;
            case NULL, TERMR_NULL -> 99;
            default -> -1;
        };
    }

    public static boolean isLeftAssociative(LanguageItemType type) {
        return switch (type) {
            case OPERATOR_POWER -> false;
            default -> true;
        };
    }

    public static boolean isRightAssociative(LanguageItemType type) {
        return !isLeftAssociative(type);
    }
}
