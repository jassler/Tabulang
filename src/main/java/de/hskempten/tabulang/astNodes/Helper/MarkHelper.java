package de.hskempten.tabulang.astNodes.helper;

import de.hskempten.tabulang.interpreter.Interpretation;
import de.hskempten.tabulang.astNodes.Node;
import de.hskempten.tabulang.datatypes.InternalNumber;
import de.hskempten.tabulang.datatypes.InternalObject;
import de.hskempten.tabulang.datatypes.InternalString;
import de.hskempten.tabulang.datatypes.Tuple;
import de.hskempten.tabulang.datatypes.exceptions.InterpreterException;
import de.hskempten.tabulang.tokenizer.TextPosition;

/**
 * Class that handles the functionality of marking a data since multiple nodes generated by the parser use this method.
 */
public class MarkHelper {

    /**
     * Marks date with specified value.
     *
     * @throws InterpreterException if value is neither null, a number or a string
     */
    public static void setMark(Object date, Interpretation interpretation, Node middleNode, Node rightNode, TextPosition textPosition) {
        Interpretation nestedInterpretation = interpretation.deepCopy();
        InternalString annotationKey = middleNode.verifyAndReturnString(interpretation);
        Object annotationValue = rightNode.evaluateNode(nestedInterpretation);
        if (annotationValue == null) {
            ((InternalObject) date).getStyle().getAnnotations().put(annotationKey.getString(), null);
        } else if (annotationValue instanceof InternalString || annotationValue instanceof InternalNumber) {
            ((InternalObject) date).getStyle().getAnnotations().put(annotationKey.getString(), annotationValue.toString());
        } else {
            throw new InterpreterException(textPosition, annotationValue.getClass().getSimpleName(), rightNode.getTextPosition());
        }
    }

    /**
     * Sets every element of a tuple as an identifier in the environment before marking. This way certain elements of the tuple can be annotated.
     */
    public static void prepareTupleMark(Tuple<?> date, Interpretation interpretation, Node middleNode, Node rightNode, TextPosition textPosition) {
        Interpretation nestedInterpretation = interpretation.deepCopy();
        for (int j = 0; j < date.size(); j++) {
            Object element = date.getElements().get(j);
            Object name = date.getNames().get(j);
            nestedInterpretation.getEnvironment().put(name.toString(), element);
        }
        setMark(date, nestedInterpretation, middleNode, rightNode, textPosition);
    }
}
